create table transport_companies (
id serial primary key,
name varchar(30) not null,
email VARCHAR(255) NOT NULL UNIQUE CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'),
phone_number VARCHAR(15) NOT NULL UNIQUE CHECK (phone_number ~ '^(\+\d{1,3})?[\d\s\-\(\)]{5,15}$'),
license bytea not null,
registration_date TIMESTAMP not null,
last_login_date timestamp,
profile_photo bytea,
)


create table clients(
id serial primary key,
first_name	VARCHAR(20)	not null,
last_name	VARCHAR(30)	not null,
middle_name	VARCHAR(30),
birth_date date,
gender gender,
email VARCHAR(255) NOT NULL UNIQUE CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'),
phone_number VARCHAR(15) NOT NULL UNIQUE CHECK (phone_number ~ '^(\+\d{1,3})?[\d\s\-\(\)]{5,15}$'),
registration_date TIMESTAMP not null,
last_login_date timestamp,
profile_photo bytea
)	

create table buses(
    id SERIAL PRIMARY KEY,                       
    company_id INTEGER NOT NULL REFERENCES transport_companies(id), 
    model VARCHAR(15) NOT NULL,
    year_of_manufacture integer not null,
    last_TO_date DATE NOT NULL,           
    bus_photos bytea not null, 
    driver_photo bytea not null,
    driver_license bytea not null,
    available_start TIMESTAMP,
    available_end TIMESTAMP,
    seat_count INTEGER NOT NULL CHECK (seat_count > 0), 
    has_tv BOOLEAN DEFAULT FALSE,              
    has_wifi BOOLEAN DEFAULT FALSE,              
    has_air_conditioning BOOLEAN DEFAULT FALSE,   
    has_interior_lighting BOOLEAN DEFAULT FALSE,  
    has_microphone BOOLEAN DEFAULT FALSE,        
    has_usb_charger BOOLEAN DEFAULT FALSE,       
    has_usb_sync BOOLEAN DEFAULT FALSE,           
    has_accessibility_features BOOLEAN DEFAULT FALSE
)

CREATE TABLE orders (
    id SERIAL PRIMARY KEY,                        
    user_id INTEGER NOT NULL REFERENCES users(id), 
    bus_id INTEGER NOT NULL REFERENCES buses(id), 
    start_time TIMESTAMP NOT NULL,                
    end_time TIMESTAMP NOT NULL,                  
    start_point VARCHAR(100) NOT NULL,  
    end_point VARCHAR(100) NOT NULL,  
    passengers_count INTEGER NOT NULL,          
    comments TEXT,                              
    price integer NOT NULL,                
    order_status booking_status NOT NULL,                   
    payment_method payment_method NOT null,
    payment_status payment_status not null,
    order_date TIMESTAMP not null
);

CREATE TABLE rent_conditions (
    id SERIAL PRIMARY KEY,                        
    buses_id INTEGER NOT NULL REFERENCES buses(id), 
    min_hours	INTEGER not null,
    min_cancel_time integer not null,
    min_rent_time integer not null,
    price_weekends integer not null,
    price_weekdays integer not null,
);

CREATE TABLE reviews (
    id SERIAL PRIMARY KEY,                        
    users_id INTEGER NOT NULL REFERENCES users(id), 
    buses_id INTEGER NOT NULL REFERENCES buses(id), 
    rating INTEGER not null CHECK (rating BETWEEN 1 AND 5),
    text varchar(1000),
    creation_date TIMESTAMP not null,
    answer varchar(1000)
); 

CREATE TABLE notifications (
    id SERIAL PRIMARY KEY,       
    user_id INTEGER NOT NULL REFERENCES users(id), 
     notification_type notification_type not null,
     notification_method notification_method not null,
     notification_is boolean NOT NULL
); 


// Добавлены ограничения:

ALTER TABLE public.orders
ADD CONSTRAINT check_start_end_time CHECK (start_time <= end_time);

ALTER TABLE public.orders
ADD CONSTRAINT check_number_of_people CHECK (number_of_people > 0);

ALTER TABLE public.orders
ADD CONSTRAINT check_price CHECK (price > 0);

ALTER TABLE public.bus
ADD CONSTRAINT check_seat_count CHECK (seat_count > 0);

ALTER TABLE public.bus
ADD CONSTRAINT check_price_weekdays CHECK (price_weekdays > 0);

ALTER TABLE public.bus
ADD CONSTRAINT check_price_weekends CHECK (price_weekends > 0);

CREATE OR REPLACE FUNCTION update_avg_rating()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE buses
    SET avg_rating = (
        SELECT COALESCE(AVG(rating), 0)
        FROM reviews
        WHERE buses_id = NEW.buses_id
    )
    WHERE id = NEW.buses_id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_avg_rating_insert
AFTER INSERT ON review
FOR EACH ROW
EXECUTE FUNCTION update_avg_rating();

CREATE TRIGGER trigger_update_avg_rating_update
AFTER UPDATE OF rating ON review
FOR EACH ROW
EXECUTE FUNCTION update_avg_rating();

CREATE TRIGGER trigger_update_avg_rating_delete
AFTER DELETE ON review
FOR EACH ROW
EXECUTE FUNCTION update_avg_rating();